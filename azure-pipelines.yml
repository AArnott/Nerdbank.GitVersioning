trigger:
  branches:
    include: ["master", "pipelines"]
  paths:
    exclude: ["doc", "*.md", ".appveyor.yml", ".travis.yml"]

variables:
  TreatWarningsAsErrors: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  BuildConfiguration: Release
  BuildPlatform: Any CPU

resources:
  containers:
  - container: xenial
    image: andrewarnott/linux-buildagent

jobs:
- job: Windows
  pool: Hosted VS2017
  steps:
  - script: |
      git config --global user.name ci
      git config --global user.email me@ci.com
    displayName: Configure git commit author for testing
  - script: |
      dotnet tool install --tool-path . nbgv
      .\nbgv cloud -p src
    displayName: Set build number
    condition: ne(variables['system.pullrequest.isfork'], true)
  - script: dotnet --info
    displayName: Show dotnet SDK info

  - task: DotNetCoreCLI@2
    displayName: Restore NuGet packages
    inputs:
      command: restore
      verbosityRestore: normal # detailed, normal, minimal
      projects: src/**/*.sln
      feedsToUse: config
      nugetConfigPath: src/nuget.config

  - task: geeklearningio.gl-vsts-tasks-yarn.yarn-installer-task.YarnInstaller@2
    displayName: 'Use Yarn 1.x'
  - task: geeklearningio.gl-vsts-tasks-yarn.yarn-task.Yarn@2
    displayName: 'Yarn install'
    inputs:
      ProjectDirectory: 'src/nerdbank-gitversioning.npm'
  - script: .\node_modules\.bin\typings install
    displayName: Install Typings
    workingDirectory: src\nerdbank-gitversioning.npm

  - task: VSBuild@1
    inputs:
      vsVersion: 15.0
      msbuildArgs: /t:build,pack /m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/msbuild.binlog"
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
    displayName: Build NuGet package and tests

  - task: gulp@0
    displayName: Build nerdbank-gitversioning NPM package
    inputs:
      gulpfile: src\nerdbank-gitversioning.npm\gulpfile.js

  - script: dotnet test src/Nerdbank.GitVersioning.Tests --no-build -c $(BuildConfiguration)
    displayName: Run tests
    continueOnError: true

  - task: CopyFiles@1
    inputs:
      Contents: |
        bin\**\*.nupkg
        bin\js\*.tgz
      TargetFolder: $(Build.ArtifactStagingDirectory)/deployables
      flattenFolders: true
    displayName: Collecting deployable artifacts
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/deployables
      ArtifactName: deployables
      ArtifactType: Container
    displayName: Publish deployables artifacts
    condition: and(succeeded(), ne(variables['system.pullrequest.isfork'], true))
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)/build_logs
      ArtifactName: build_logs
      ArtifactType: Container
    displayName: Publish build_logs artifacts
    condition: and(succeededOrFailed(), ne(variables['system.pullrequest.isfork'], true))

#- job: Linux
#  pool:
#    vmImage: Ubuntu 16.04
#  container: xenial
#  variables:
#    GitLinkEnabled: false
#  steps:
#
#- job: macOS
#  pool:
#    vmImage: macOS 10.13
#  variables:
#    GitLinkEnabled: false
#  steps:
